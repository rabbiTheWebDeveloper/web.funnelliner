import axios from 'axios';
import Head from 'next/head';
import Router from 'next/router';
import { useEffect, useState } from 'react';
import { Toaster } from "react-hot-toast";
import { Provider } from "react-redux";
import 'react-toastify/dist/ReactToastify.css';
import Layout from '../Components/Common/layout';
import Loader from '../Components/Loader/Loader';
import { store } from "../redux/app/store";
import '../styles/Register.css';
import '../styles/admin_dashboard.css';
import '../styles/admin_dashboard_media.css';
import { headers } from './api';

function MyApp({ Component, pageProps, router }) {
    const [isLoading, setIsLoading] = useState(false);
    const [isStatus, setIsStatus] = useState(1)

    const style = {
        style: {
            border: '1px solid #894bca',
            padding: '16px',
            color: '#894bca',
        },
        iconTheme: {
            primary: '#894bca',
            secondary: '#FFFAEE',
        },
        duration: 2000
    }

    useEffect(() => {
        Router.events.on("routeChangeStart", (url) => {
            setIsLoading(true)
            setIsStatus(isStatus + 1)
        });

        Router.events.on("routeChangeComplete", (url) => {
            setIsLoading(false)
        });

        Router.events.on("routeChangeError", (url) => {
            setIsLoading(false)
        });

    }, [Router])

    const [busInfo, setBusInfo] = useState({});

    const handleFetchBusInfo = async () => {
        try {
            let data = await axios({
                method: "get",
                url: `${process.env.API_URL}/client/settings/business-info`,
                headers: headers,
            });
            setBusInfo(data?.data?.data);
        } catch (err) {
            // console.log(err)
        }
    };

    useEffect(() => {
        handleFetchBusInfo();
    }, []);


    if (router.pathname.startsWith("/login")) {

        return (
            <>
                <Head>
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <title>Funnel Liner - Automated Sales Funnel</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="../images/favicon.png" />
                </Head>
                {isLoading && <Loader />}
                <Provider store={store}>
                    <Toaster toastOptions={style}/>
                    <Component {...pageProps} />
                </Provider>

            </>
        )

    }

    if (router.pathname.startsWith("/invoice-one/")) {

        return (
            <>
                <Head>
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <title>Funnel Liner - Automated Sales Funnel</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="../images/favicon.png" />
                </Head>
                {isLoading && <Loader />}
                <Provider store={store}>
                    <Component {...pageProps} />
                </Provider>

            </>
        )

    }
    if (router.pathname.startsWith("/forgot-password")) {

        return (
            <>
                <Head>
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <title>Funnel Liner - Automated Sales Funnel</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="../images/favicon.png" />
                </Head>
                {isLoading && <Loader />}
                <Provider store={store}>
                    <Component {...pageProps} />
                </Provider>

            </>
        )

    }
    return (
        <>
            <Head>
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <title>Funnel Liner - Automated Sales Funnel</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="../images/favicon.png" />
            </Head>

            {isLoading && <Loader />}
            <Provider store={store}>

                <Toaster toastOptions={style}/>
                <Layout busInfo={busInfo}>
                    <Component {...pageProps} busInfo={busInfo}/>
                </Layout>

            </Provider>

        </>
    );


}

export default MyApp
